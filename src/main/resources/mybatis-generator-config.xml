<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
           "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!-- 引入外部配置文件 -->
    <properties resource="application.properties"/>

    <!--
        一个数据库一个context,context的子元素必须按照它给出的顺序
              property*,plugin*,commentGenerator?,jdbcConnection,javaTypeResolver?,
             javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+

            property (0..N)
            plugin (0..N)
            commentGenerator (0 or 1)
            jdbcConnection (需要connectionFactory 或 jdbcConnection)
            javaTypeResolver (0 or 1)
            javaModelGenerator (至少1个)
            sqlMapGenerator (0 or 1)
            javaClientGenerator (0 or 1)
            table (1..N)

         id : 随便填，保证多个 context id 不重复就行
         defaultModelType ： 可以不填，默认值 conditional，flat表示一张表对应一个po
         targetRuntime ：可以不填，默认值 MyBatis3，常用的还有 MyBatis3Simple，这个配置会影响生成的 dao 和 mapper.xml的内容
    -->
    <context id="myContext" targetRuntime="MyBatis3" defaultModelType="flat">


        <!-- 这个插件给生成的Java模型对象增加了equals和hashCode方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->

        <!-- 注释   默认是生成注释的，并且会生成时间戳-->
        <commentGenerator>
            <!-- 不生成注释 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 生成的注释中不包含时间戳 -->
            <!--<property name="suppressDate" value="true"/>-->
            <!-- 添加 db 表中字段的注释，只有suppressAllComments为false时才生效-->
            <!--<property name="addRemarkComments" value="true"/>-->
        </commentGenerator>


        <!--
            MyBatis Generator 需要链接数据库，所以需要配置 jdbcConnection
        -->
        <!-- jdbc连接 -->
        <jdbcConnection driverClass="${spring.datasource.driverClassName}"
                        connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}"
                        password="${spring.datasource.password}">

            <!--高版本的 mysql-connector-java 需要设置 nullCatalogMeansCurrent=true-->
            <!--因为我用的 mysql-connector-java 版本是 8.0.17,如果配置这一项，会找不到对应的数据库-->
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>


        <!--
            javaTypeResolver 是配置 JDBC 与 java 的类型转换规则，或者你也可以不用配置，使用它默认的转换规则。
            就算配置也只能配置 bigDecimal 类型和时间类型的转换
        -->
        <!-- 类型转换 -->
        <javaTypeResolver>
            <!--是否使用bigDecimal，默认false。
                false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer
                true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal-->
            <property name="forceBigDecimals" value="true"/>
            <!--默认false
                false，将所有 JDBC 的时间类型解析为 java.util.Date
                true，将 JDBC 的时间类型按如下规则解析
                    DATE	                -> java.time.LocalDate
                    TIME	                -> java.time.LocalTime
                    TIMESTAMP               -> java.time.LocalDateTime
                    TIME_WITH_TIMEZONE  	-> java.time.OffsetTime
                    TIMESTAMP_WITH_TIMEZONE	-> java.time.OffsetDateTime
                -->
            <!--<property name="useJSR310Types" value="false"/>-->
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="com.example.generator.po" targetProject="src/main/java">
            <!-- 是否让 schema 作为包的后缀，默认为false 可能会在 po 目录下在创建一个 “数据库名” 的文件夹，生成的 po 会放在该文件夹下，也就是说会多一层目录，用的上的可以配置 -->
            <!--<property name="enableSubPackages" value="false"/>-->

            <!-- 是否针对string类型的字段在set方法中进行修剪，默认false -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>


        <!-- 配置生成Mapper.xml文件的位置 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!--<property name="enableSubPackages" value="false"/>-->
        </sqlMapGenerator>

        <!-- 生成 XxxMapper.java 接口-->
        <!--
            type="XMLMAPPER" 会将接口的实现放在 mapper.xml中，也推荐这样配置。也可以设置 type 为其他值，比如 type="ANNOTATEDMAPPER"，接口的实现通过注解写在接口上面
            如果采用这种方式，不会生成 mapper.xml 也不用配置 <sqlMapGenerator>,但是采用注解来实现接口应对简单查询还好，如果是复杂查询并不如xml方便，所以还是建议将type配置成XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.example.generator.dao" targetProject="src/main/java" type="XMLMAPPER">
            <!--<property name="enableSubPackages" value="false"/>-->
        </javaClientGenerator>


        <!--
             schema为数据库名，oracle需要配置，mysql不需要配置。
             tableName为对应的数据库表名
             domainObjectName 是要生成的实体类名(可以不指定，默认按帕斯卡命名法将表名转换成类名)
             enableXXXByExample 默认为 true， 为 true 会生成一个对应Example帮助类，帮助你进行条件查询，不想要可以设为false
             enableXXXByExample 默认为true，但只有在targetRuntime="MyBatis3"时才生效,生效时，会在po下多生成一个 XxxExample.java 的文件
             当 targetRuntime="MyBatis3Simple"时，enableXXXByExample 不管为true、还是false 都不生效
         -->
        <table schema="" tableName="t_checkitem" domainObjectName="CheckItem"
               enableCountByExample="true" enableDeleteByExample="true" enableSelectByExample="true"
               enableUpdateByExample="true" selectByExampleQueryId="true">
            <!--是否使用实际列名,默认为false-->
            <!--<property name="useActualColumnNames" value="false" />-->
        </table>
    </context>
</generatorConfiguration>
